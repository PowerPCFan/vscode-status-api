# this file was mostly generated by GPT-5 and Claude 4 Sonnet since I don't know SQL
# i promise i wrote the rest of the api ok?

import sqlite3
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, Optional
from contextlib import contextmanager
from modules.utils.logger import logger

class Database:
    def __init__(self, db_file: str = "user_statuses.db"):
        script_dir = Path(__file__).resolve().parent.parent.parent
        api_dir = script_dir.parent
        self.db_file = api_dir / "data" / db_file
        self._init_database()

    def _init_database(self):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id TEXT PRIMARY KEY,
                    auth_token TEXT NOT NULL,
                    created_at TEXT NOT NULL,
                    last_updated TEXT,
                    status_data TEXT DEFAULT '{}'
                )
            ''')
            conn.commit()
            logger.info("Database initialized successfully")

    @contextmanager
    def _get_connection(self):
        conn = None
        try:
            conn = sqlite3.connect(self.db_file)
            conn.row_factory = sqlite3.Row  # Enable column access by name
            yield conn
        except sqlite3.Error as e:
            logger.error(f"Database error: {e}")
            if conn:
                conn.rollback()
            raise
        finally:
            if conn:
                conn.close()

    def _create_user(self, cursor: sqlite3.Cursor, user_id: str, auth_token: str, status_data: Optional[Dict[str, Any]] = None, set_last_updated: bool = False) -> None:
        now_iso = datetime.now().isoformat()
        if set_last_updated and status_data is not None:
            cursor.execute(
                "INSERT INTO users (user_id, auth_token, created_at, last_updated, status_data) VALUES (?, ?, ?, ?, ?)",
                (user_id, auth_token, now_iso, now_iso, json.dumps(status_data)),
            )
        else:
            cursor.execute(
                "INSERT INTO users (user_id, auth_token, created_at, status_data) VALUES (?, ?, ?, ?)",
                (user_id, auth_token, now_iso, '{}'),
            )

    def _user_exists(self, cursor: sqlite3.Cursor, user_id: str) -> bool:
        cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
        return cursor.fetchone() is not None

    def _update_user_status(self, cursor: sqlite3.Cursor, user_id: str, status_data: Dict[str, Any]) -> None:
        cursor.execute(
            "UPDATE users SET status_data = ?, last_updated = ? WHERE user_id = ?",
            (json.dumps(status_data), datetime.now().isoformat(), user_id),
        )

    def authenticate_user(self, user_id: str, auth_token: str) -> bool:
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT auth_token FROM users WHERE user_id = ?",
                    (user_id,)
                )
                result = cursor.fetchone()
                if result is None:
                    return False
                return result['auth_token'] == auth_token
        except sqlite3.Error as e:
            logger.error(f"Authentication error: {e}")
            return False

    def update_status(self, user_id: str, auth_token: str, status_data: Dict[str, Any]) -> tuple[bool, str, bool]:
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                # Check if user exists first
                if self._user_exists(cursor, user_id):
                    # Authenticate existing user
                    if not self.authenticate_user(user_id, auth_token):
                        return False, "Authentication failed: Invalid user ID or token", False

                    # Update existing user's status
                    self._update_user_status(cursor, user_id, status_data)
                    conn.commit()
                    return True, "Status updated successfully", False
                else:
                    # Create user as register_user would, then update status
                    created = True
                    try:
                        self._create_user(cursor, user_id, auth_token)
                    except sqlite3.IntegrityError:
                        # Race: user created after existence check
                        created = False

                    if not created:
                        # Now treat as existing user
                        if not self.authenticate_user(user_id, auth_token):
                            return False, "Authentication failed: Invalid user ID or token", False
                        self._update_user_status(cursor, user_id, status_data)
                        conn.commit()
                        return True, "Status updated successfully", False

                    # Newly created user: now update their status
                    self._update_user_status(cursor, user_id, status_data)
                    conn.commit()
                    return True, "Status updated successfully", True

        except sqlite3.Error as e:
            logger.error(f"Failed to update status for user {user_id}: {e}")
            return False, "Database error: Failed to save status", False

    def register_user(self, user_id: str, auth_token: str) -> tuple[bool, str]:
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()

                # Check if user already exists
                if self._user_exists(cursor, user_id):
                    return False, "User already exists"
                
                # Insert new user
                try:
                    self._create_user(cursor, user_id, auth_token)
                except sqlite3.IntegrityError:
                    return False, "User already exists"
                
                conn.commit()
                return True, "User registered successfully"
        except sqlite3.Error as e:
            logger.error(f"Failed to register user {user_id}: {e}")
            return False, "Database error: Failed to register user"

    def get_status(self, user_id: str) -> Optional[Dict[str, Any]]:
        try:
            # Clean up this user's old status first to ensure we don't return stale data
            self.cleanup_old_status(user_id)
            
            with self._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT user_id, status_data, last_updated, created_at FROM users WHERE user_id = ?",
                    (user_id,)
                )
                result = cursor.fetchone()
                
                if result is None:
                    return None
                
                # Parse JSON status data
                try:
                    status = json.loads(result['status_data'])
                except json.JSONDecodeError:
                    status = {}
                
                # If status is empty or last_updated is None, return minimal response
                if not status or result['last_updated'] is None:
                    return {
                        'user_id': result['user_id'],
                        'status': {}
                    }
                
                return {
                    'user_id': result['user_id'],
                    'status': status,
                    'last_updated': result['last_updated'],
                    'created_at': result['created_at']
                }
                
        except sqlite3.Error as e:
            logger.error(f"Failed to get status for user {user_id}: {e}")
            return None

    def user_exists(self, user_id: str) -> bool:
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
                return cursor.fetchone() is not None
        except sqlite3.Error as e:
            logger.error(f"Failed to check if user exists {user_id}: {e}")
            return False

    def cleanup_old_status(self, user_id: str, max_age_minutes: int = 10) -> bool:
        """Clear a specific user's status data if it hasn't been updated in the specified time period.
        
        Args:
            max_age_minutes: Maximum age in minutes before a status is considered stale
            user_id: The specific user ID to check and potentially clear status data
            
        Returns:
            True if status data was cleared, False if not cleared
        """
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                
                # Get the last_updated timestamp for the specific user
                cursor.execute(
                    "SELECT last_updated FROM users WHERE user_id = ?",
                    (user_id,)
                )
                result = cursor.fetchone()
                
                if result is None:
                    # User doesn't exist
                    return False

                last_updated = result['last_updated']
                
                # Check if last_updated is None or older than max_age_minutes
                if last_updated is None:
                    # Clear status data for user with NULL last_updated
                    cursor.execute(
                        "UPDATE users SET status_data = '{}', last_updated = NULL WHERE user_id = ?", 
                        (user_id,)
                    )
                    conn.commit()
                    logger.info(f"Cleared status data for user {user_id} with NULL last_updated timestamp")
                    return True
                
                # Parse the timestamp and check if it's older than the cutoff
                last_updated_time = datetime.fromisoformat(last_updated)
                cutoff_time = datetime.now() - timedelta(minutes=max_age_minutes)
                
                if last_updated_time < cutoff_time:
                    # Clear the old status data but keep the user record
                    cursor.execute(
                        "UPDATE users SET status_data = '{}', last_updated = NULL WHERE user_id = ?", 
                        (user_id,)
                    )
                    conn.commit()
                    logger.info(f"Cleared status data for inactive user {user_id} (last updated: {last_updated}, older than {max_age_minutes} minutes)")
                    return True
                else:
                    # Status is still fresh
                    logger.debug(f"User {user_id} is still active (last updated: {last_updated})")
                    return False
                
        except sqlite3.Error as e:
            logger.error(f"Failed to cleanup old status for user {user_id}: {e}")
            return False


db = Database()
